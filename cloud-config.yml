#cloud-config
---
coreos:
  update:
    group: stable
    reboot-strategy: best-effort
  units:
    - name: 00-eth1-static.network
      runtime: true
      content: |
        [Match]
        Name=eth1
        MTUBytes=1450

        [Network]
        DHCP=no
        Address=10.99.0.254/24

        [Link]
        MTUBytes=1450

    - name: custom-mtu.service
      command: start
      content: |
        [Unit]
        Requires=00-eth1-static.network

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/ip link set dev eth1 mtu 1450

    - name: systemd-modules-load.service
      command: restart

    - name: iptables-restore.service
      enable: true
      command: start

    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-vda.device
        Requires=dev-vda.device

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/vda
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/vda

    - name: mnt.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /mnt
        Requires=format-ephemeral.service
        After=format-ephemeral.service

        [Mount]
        What=/dev/vda
        Where=/mnt
        Type=ext4

    - name: rbind-mount-points.service
      command: start
      content: |
        [Unit]
        Description=create bind mounts in /mnt
        Requires=mnt.mount
        After=mnt.mount

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/mkdir -p /mnt/docker
        ExecStart=/usr/bin/mkdir -p /mnt/matchbox
        ExecStart=/usr/bin/mkdir -p /mnt/tmp_install
        ExecStart=/usr/bin/mkdir -p /var/lib/matchbox/assets

    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=bind mount /var/lib/docker to ephemeral
        Requires=rbind-mount-points.service
        After=rbind-mount-points.service

        [Mount]
        What=/mnt/docker
        Where=/var/lib/docker
        Type=none
        Options=rbind

    - name: var-lib-matchbox-assets.mount
      command: start
      content: |
        [Unit]
        Description=bind mount /var/lib/docker to ephemeral
        Requires=rbind-mount-points.service
        After=rbind-mount-points.service

        [Mount]
        What=/mnt/matchbox
        Where=/var/lib/matchbox/assets
        Type=none
        Options=rbind

    - name: docker.service
      drop-ins:
        - name: 10-wait-docker.conf
          content: |
            [Unit]
            After=var-lib-docker.mount
            Requires=var-lib-docker.mount

    - name: matchbox-install.service
      command: start
      content: |
        [Unit]
        Description=Download and install latest tectonic from coreOS
        After=docker.service
        Requires=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/matchbox_first_run.sh

    - name: matchbox-setup.service
      command: start
      content: |
        [Unit]
        Description=Populate matchbox assets
        Requires=matchbox-install.service
        After=matchbox-install.service
        Before=matchbox.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/matchbox_setup.sh

    - name: bootkube-setup.service
      command: start
      content: |
        [Unit]
        Description=Populate matchbox assets with bootkube
        Requires=matchbox-setup.service
        After=matchbox-setup.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/bootkube_setup.sh

    - name: matchbox.service
      command: start
      content: |
        [Unit]
        Description=CoreOS matchbox Server
        Documentation=https://github.com/coreos/matchbox
        After=matchbox-setup.service
        Requires=matchbox-setup.service

        [Service]
        Environment="IMAGE=quay.io/coreos/matchbox"
        Environment="VERSION=v0.5.0"
        Environment="MATCHBOX_ADDRESS=10.99.0.254:8080"
        Environment="MATCHBOX_RPC_ADDRESS=10.99.0.254:8081"
        Environment="MATCHBOX_LOG_LEVEL=debug"
        ExecStartPre=/usr/bin/mkdir -p /etc/matchbox
        ExecStartPre=/usr/bin/mkdir -p /var/lib/matchbox/assets
        ExecStart=/usr/bin/rkt run \
        --net=host \
        --inherit-env \
        --trust-keys-from-https \
        --mount volume=data,target=/var/lib/matchbox \
        --mount volume=config,target=/etc/matchbox \
        --volume data,kind=host,source=/var/lib/matchbox \
        --volume config,kind=host,source=/etc/matchbox \
        ${IMAGE}:${VERSION}

        [Install]
        WantedBy=multi-user.target

    - name: matchbox-dnsmasq.service
      command: start
      content: |
        [Unit]
        After=matchbox.service
        Requires=matchbox.service
        Description=Matchbox DHCP, DNS, TFTP via dnsmasq

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq
        ExecStartPre=/usr/bin/docker run -d -ti \
          --name matchbox-dnsmasq \
          --cap-add=NET_ADMIN \
          --net=host \
          quay.io/coreos/dnsmasq -d -q \
          --interface=eth1 \
          --dhcp-range=10.99.0.100,10.99.0.250,infinite \
          --address=/matchbox.gsm-port.com/10.99.0.254 \
          --dhcp-option=3 \
          --dhcp-option=26,1450 \
          --dhcp-userclass=set:ipxe,iPXE \
          --dhcp-boot=tag:#ipxe,undionly.kpxe \
          --dhcp-boot=tag:ipxe,http://matchbox.gsm-port.com:8080/boot.ipxe \
          --enable-tftp \
          --tftp-root=/var/lib/tftpboot \
          --log-queries \
          --log-dhcp
        ExecStart=/usr/bin/docker logs -f matchbox-dnsmasq
        ExecStop=/usr/bin/docker stop matchbox-dnsmasq
        ExecStop=/usr/bin/docker rm matchbox-dnsmasq
        Restart=always
        RestartSec=15s

        [Install]
        WantedBy=multi-user.target

    - name: pushcfg.service
      enable: true
      command: start
      content: |
        [Unit]
        After=matchbox-dnsmasq.service
        Description=Sinatra listening for servers / pushing kubecfg

        [Service]
        ExecStartPre=/opt/bin/pushcfg_setup.sh
        ExecStartPre=/usr/bin/docker pull ruby:latest
        ExecStartPre=/usr/bin/docker run -ti -d \
        --name pushcfg \
        -w /usr/src/app \
        -p 8790:8790 \
        -v /mnt/pushcfg:/usr/src/app \
        -v /mnt/tmp_install/bk:/opt/bootkube \
        -v /usr/bin/docker:/usr/bin/docker:ro \
        -v /var/run/docker.sock:/var/run/docker.sock:rw \
        -v /home/core/.ssh/id_rsa:/root/.ssh/id_rsa:ro \
        -v /home/core/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub:ro \
        ruby:latest /bin/bash -c "bundle install && bundle exec ruby -e 'require \"./pushcfg.rb\"'"
        ExecStart=/usr/bin/docker logs -f pushcfg
        ExecStop=/usr/bin/docker stop pushcfg
        ExecStop=/usr/bin/docker rm pushcfg
        Restart=on-failure
        RestartSec=30s

        [Install]
        WantedBy=multi-user.target

write_files:
  - path: /opt/bin/pushcfg_setup.sh
    permissions: 0755
    owner: 'root:root'
    content: |
      #!/bin/bash

      # -v /var/lib/docker:/var/lib/docker:rw \
      # --net=host \

      mkdir -p /mnt/pushcfg
      # TODO: git clone vultrk8 repo instead
      curl https://raw.githubusercontent.com/voobscout/k8booter/master/pushcfg.rb -o /mnt/pushcfg/pushcfg.rb
      echo 'source "https://rubygems.org"' > /mnt/pushcfg/Gemfile
      echo 'gem "sinatra"' >> /mnt/pushcfg/Gemfile
      echo 'gem "cocaine"' >> /mnt/pushcfg/Gemfile
      logger -t pushcfg_setup After running setup script

  - path: /opt/bin/matchbox_first_run.sh
    permissions: 0755
    owner: 'root:root'
    content: |
      #!/usr/bin/env bash

      cd /mnt/tmp_install && \
      wget -c https://github.com/coreos/matchbox/releases/download/v0.5.0/matchbox-v0.5.0-linux-amd64.tar.gz && \
      tar xzf matchbox-v0.5.0-linux-amd64.tar.gz

      # chown --recursive core:core /mnt/tmp_install

      IP_eth0=$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)
      IP_eth1=$(ip addr show eth1 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)

      cd /mnt/tmp_install/matchbox-v0.5.0-linux-amd64/scripts/tls

      export SAN=DNS.1:matchbox.gsm-port.com
      # ,IP.1:$IP_eth0,IP.2:$IP_eth1
      ./cert-gen

      mkdir -p /etc/matchbox
      cp ca.crt server.crt server.key /etc/matchbox/

      mkdir -p /mnt/tmp_install/tls
      cp *.key *.crt /mnt/tmp_install/tls

      cd /mnt/tmp_install/matchbox-v0.5.0-linux-amd64
      ./scripts/get-coreos stable 1298.5.0 .

      mv ./coreos /var/lib/matchbox/assets

      logger -t MB_1st_run -s 'installed matchbox...'

  - path: /opt/bin/matchbox_setup.sh
    permissions: 0755
    owner: 'root:root'
    content: |
      #!/usr/bin/env bash

      git clone https://github.com/voobscout/k8booter.git /var/lib/matchbox/tmp
      mv /var/lib/matchbox/tmp/* /var/lib/matchbox
      rm -rf /var/lib/matchbox/tmp
      rm -rf /var/lib/matchbox/cloud-config.yml
      rm -rf /var/lib/matchbox/matchbox.ipxe
      rm -rf /var/lib/matchbox/node.ipxe
      rm -rf /var/lib/matchbox/tectonic-matchbox.yml

      logger -t MB_1st_run -s 'cloned matchbox config from git repo...'

  - path: /opt/bin/bootkube_setup.sh
    permissions: 0755
    owner: 'root:root'
    content: |
      #!/usr/bin/env bash

      PATH=/opt/bin:$PATH
      mkdir -p /mnt/tmp_install/bk
      cd /mnt/tmp_install/bk && \
      wget -c https://github.com/kubernetes-incubator/bootkube/releases/download/v0.3.11/bootkube.tar.gz && \
      tar xvzf bootkube.tar.gz
      mv /mnt/tmp_install/bk/bin/linux/* /opt/bin/

      cd /mnt/tmp_install
      rm -rf /mnt/tmp_install/bk
      mkdir -p /mnt/tmp_install/bk
      cd /mnt/tmp_install/bk
      /opt/bin/bootkube render --asset-dir=assets --api-servers=https://node1.gsm-port.com:443 --api-server-alt-names=DNS=node1.gsm-port.com

      # generate deployment keys
      /usr/bin/ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa -C deployment@gsm-port.com
      mkdir -p /home/core/.ssh
      cp ~/.ssh/id_rsa* /home/core/.ssh
      chown 500:500 /home/core/.ssh/id_rsa*

      cd /var/lib/matchbox/groups
      for node in 'node1' 'node2' 'node3'; do
        cat $node.json | jq -r ".metadata.ssh_authorized_keys |= . + [\"$(cat ~/.ssh/id_rsa.pub)\"]" > $node.json
      done

      logger -t MB_1st_run -s 'bootkube installed...'

  - path: /opt/bin/kubeconfig-install.sh
    permissions: 0755
    owner: 'root:root'
    content: |
      #!/usr/bin/env bash
      cd /mnt/tmp_install/bk
      for node in 'node1' 'node2' 'node3'; do
        scp assets/auth/kubeconfig core@$node.gsm-port.com:/home/core/kubeconfig
        ssh core@$node.gsm-port.com 'sudo mkdir -p /etc/kubernetes && sudo mv kubeconfig /etc/kubernetes/kubeconfig'
      done

  - path: /opt/bin/kubeconfig-controller-install.sh
    permissions: 0755
    owner: 'root:root'
    content: |
      #!/usr/bin/env bash
      cd /mnt/tmp_install/bk
      scp -r assets core@node1.gsm-port.com:/home/core
      ssh core@node1.gsm-port.com 'sudo mkdir -p /opt/bootkube && sudo mv assets /opt/bootkube/assets && sudo systemctl start bootkube'

  - path: /etc/modules-load.d/fuse.conf
    permissions: 0644
    owner: 'root:root'
    content: |
      fuse

  - path: /etc/modules-load.d/nfsd.conf
    permissions: 0644
    owner: 'root:root'
    content: |
      nfsd

  - path: /etc/ssh/sshd_config
    permissions: "0644"
    owner: root:root
    content: |
      # KeyRegenerationInterval 3600
      # ServerKeyBits 1024
      # RhostsRSAAuthentication no
      # RSAAuthentication yes
      # Banner /etc/issue.net
      UsePrivilegeSeparation yes
      SyslogFacility AUTHPRIV
      LogLevel INFO
      LoginGraceTime 120
      PermitRootLogin no
      StrictModes yes
      IgnoreRhosts yes
      HostbasedAuthentication no
      PermitEmptyPasswords no
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      PubkeyAuthentication yes
      X11Forwarding yes
      X11DisplayOffset 10
      PrintMotd yes
      PrintLastLog yes
      TCPKeepAlive yes
      AcceptEnv LANG LC_*
      ClientAliveInterval 60
      UseDNS no
      AllowGroups core

  - path: /var/lib/iptables/rules-save
    permissions: 0644
    owner: 'root:root'
    content: |
      *filter
      :INPUT DROP
      :FORWARD ACCEPT
      :OUTPUT ACCEPT
      -A INPUT -i lo -j ACCEPT
      -A INPUT -i docker0 -j ACCEPT
      -A INPUT -i eth1 -j ACCEPT
      # -A INPUT -s 172.17.0.0/16 -j ACCEPT
      -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 22 -m limit --limit 10/min --limit-burst 100 -j ACCEPT
      # -A INPUT -p tcp -m tcp --dport 6783 -m limit --limit 10/min --limit-burst 100 -j ACCEPT
      # -A INPUT -p udp -m udp --dport 6783 -m limit --limit 10/min --limit-burst 100 -j ACCEPT
      # -A INPUT -p udp -m udp --dport 6784 -m limit --limit 10/min --limit-burst 100 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT
      # -A INPUT -d 224.0.0.252/24 -p udp -m limit --limit 10/min --limit-burst 100 -j ACCEPT
      -A INPUT -m limit --limit 5/min -j LOG --log-prefix "InDrop " --log-level 4
      COMMIT
      # rules end

hostname: "matchbox.gsm-port.com"

ssh_authorized_keys:
  - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDUKXJgShJMrBFi6VvKCsCJO9c1wLA3ugL3LAJGsRO9KXdZGmLC74/s0KVw4uaWHoTz91qLPdnplSdLU3KDK7loIdKRBR8E4KJ1MiZKGIj7F9NsniiNetQkKvUazrhRx8nFOAYSPD4znkhrh53nXnsI2WDACt0CGNYX33hV3J/kblWYit/wcIEtJg1ivFmBrljtAMZpS2mBpAK0kySCY2BP+Ph8x+6EuCkH1w2J4Moa0fYkibF3K7O4cmcWAtD53eyr8YN4JKvAwTe+uXVsdFDUNkZvCdOLTDDRd7t7C+qL3nbJMv5jVoED0bBBfn7NfEfyqLOzXHmE4bfuMo7KBlH7 vod@agrajag.0.njk.li"
...
